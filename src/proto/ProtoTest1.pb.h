// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTest1.proto

#ifndef PROTOBUF_ProtoTest1_2eproto__INCLUDED
#define PROTOBUF_ProtoTest1_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoTest1_2eproto();
void protobuf_AssignDesc_ProtoTest1_2eproto();
void protobuf_ShutdownFile_ProtoTest1_2eproto();

class TestRequest;

// ===================================================================

class TestRequest : public ::google::protobuf::Message {
 public:
  TestRequest();
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestRequest& default_instance();

  void Swap(TestRequest* other);

  // implements Message ----------------------------------------------

  TestRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int32 page_number = 4;
  inline bool has_page_number() const;
  inline void clear_page_number();
  static const int kPageNumberFieldNumber = 4;
  inline ::google::protobuf::int32 page_number() const;
  inline void set_page_number(::google::protobuf::int32 value);

  // optional int32 result_per_page = 5;
  inline bool has_result_per_page() const;
  inline void clear_result_per_page();
  static const int kResultPerPageFieldNumber = 5;
  inline ::google::protobuf::int32 result_per_page() const;
  inline void set_result_per_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_page_number();
  inline void clear_has_page_number();
  inline void set_has_result_per_page();
  inline void clear_has_result_per_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::std::string* msg_;
  ::google::protobuf::int32 page_number_;
  ::google::protobuf::int32 result_per_page_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_ProtoTest1_2eproto();
  friend void protobuf_AssignDesc_ProtoTest1_2eproto();
  friend void protobuf_ShutdownFile_ProtoTest1_2eproto();

  void InitAsDefaultInstance();
  static TestRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// TestRequest

// required int32 id = 1;
inline bool TestRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TestRequest::id() const {
  return id_;
}
inline void TestRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 num = 2;
inline bool TestRequest::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestRequest::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestRequest::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestRequest::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 TestRequest::num() const {
  return num_;
}
inline void TestRequest::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required string msg = 3;
inline bool TestRequest::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestRequest::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestRequest::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestRequest::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& TestRequest::msg() const {
  return *msg_;
}
inline void TestRequest::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void TestRequest::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void TestRequest::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestRequest::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* TestRequest::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TestRequest::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 page_number = 4;
inline bool TestRequest::has_page_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestRequest::set_has_page_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestRequest::clear_has_page_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestRequest::clear_page_number() {
  page_number_ = 0;
  clear_has_page_number();
}
inline ::google::protobuf::int32 TestRequest::page_number() const {
  return page_number_;
}
inline void TestRequest::set_page_number(::google::protobuf::int32 value) {
  set_has_page_number();
  page_number_ = value;
}

// optional int32 result_per_page = 5;
inline bool TestRequest::has_result_per_page() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestRequest::set_has_result_per_page() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestRequest::clear_has_result_per_page() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestRequest::clear_result_per_page() {
  result_per_page_ = 0;
  clear_has_result_per_page();
}
inline ::google::protobuf::int32 TestRequest::result_per_page() const {
  return result_per_page_;
}
inline void TestRequest::set_result_per_page(::google::protobuf::int32 value) {
  set_has_result_per_page();
  result_per_page_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoTest1_2eproto__INCLUDED
